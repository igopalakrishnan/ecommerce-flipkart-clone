{"ast":null,"code":"var _jsxFileName = \"/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/containers/CheckoutPage/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addOrder, getAddress, getCartItems } from \"../../actions\";\nimport Layout from \"../../components/Layout\";\nimport { Anchor, MaterialButton, MaterialInput } from \"../../components/MaterialUI\";\nimport PriceDetails from \"../../components/PriceDetails\";\nimport Card from \"../../components/UI/Card\";\nimport CartPage from \"../CartPage\";\nimport AddressForm from \"./AddressForm\";\nimport \"./style.css\";\n/**\n * @author\n * @function CheckoutPage\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CheckoutStep = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkoutStep\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: props.onClick,\n      className: `checkoutHeader ${props.active && \"active\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stepNumber\",\n          children: props.stepNumber\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stepTitle\",\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), props.body && props.body]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n/* const Address = ({\n  adr,\n  selectAddress,\n  enableAddressEditForm,\n  confirmDeliveryAddress,\n  onAddressSubmit,\n}) => {\n  return (\n    <div className=\"flexRow addressContainer\">\n      <div>\n        <input name=\"address\" onClick={() => selectAddress(adr)} type=\"radio\" />\n      </div>\n      <div className=\"flexRow sb addressinfo\">\n        {!adr.edit ? (\n          <div style={{ width: \"100%\" }}>\n            <div className=\"addressDetail\">\n              <div>\n                <span className=\"addressName\">{adr.name}</span>\n                <span className=\"addressType\">{adr.addressType}</span>\n                <span className=\"addressMobileNumber\">{adr.mobileNumber}</span>\n              </div>\n              {adr.selected && (\n                <Anchor\n                  name=\"EDIT\"\n                  onClick={() => enableAddressEditForm(adr)}\n                  style={{\n                    fontWeight: \"500\",\n                    color: \"#2874f0\",\n                  }}\n                />\n              )}\n            </div>\n            <div className=\"fullAddress\">\n              {adr.address} <br /> {`${adr.state} - ${adr.pinCode}`}\n            </div>\n            {adr.selected && (\n              <MaterialButton\n                title=\"DELIVERY HERE\"\n                onClick={() => confirmDeliveryAddress(adr)}\n                style={{\n                  width: \"200px\",\n                  margin: \"10px 0\",\n                }}\n              />\n            )}\n          </div>\n        ) : (\n          <AddressForm\n            withoutLayout={true}\n            onSubmitForm={onAddressSubmit}\n            initialData={adr}\n            onCancel={() => {}}\n          />\n        )}\n      </div>\n    </div>\n  );\n}; */\n\n\n_c = CheckoutStep;\n\nconst CheckoutPage = props => {\n  _s();\n\n  const user = useSelector(state => state.user);\n  const auth = useSelector(state => state.auth);\n  const [newAddress, setNewAddress] = useState(false);\n  const [address, setAddress] = useState([]);\n  const [confirmAddress, setConfirmAddress] = useState(false);\n  const [selectedAddress, setSelectedAddress] = useState(null); //const [orderSummary, setOrderSummary] = useState(false);\n  //const [orderConfirmation, setOrderConfirmation] = useState(false);\n  //const [paymentOption, setPaymentOption] = useState(false);\n  //const [confirmOrder, setConfirmOrder] = useState(false);\n\n  const cart = useSelector(state => state.cart);\n  const dispatch = useDispatch();\n\n  const onAddressSubmit = addr => {\n    /* setSelectedAddress(addr);\n    setConfirmAddress(true);\n    setOrderSummary(true); */\n  };\n\n  const selectAddress = addr => {\n    //console.log(addr);\n    const updatedAddress = address.map(adr => adr._id === addr._id ? { ...adr,\n      selected: true\n    } : { ...adr,\n      selected: false\n    });\n    setAddress(updatedAddress);\n  };\n\n  const confirmDeliveryAddress = addr => {\n    setSelectedAddress(addr);\n    setConfirmAddress(true); //setOrderSummary(true);\n  };\n  /* const enableAddressEditForm = (addr) => {\n    const updatedAddress = address.map((adr) =>\n      adr._id === addr._id ? { ...adr, edit: true } : { ...adr, edit: false }\n    );\n    setAddress(updatedAddress);\n  };\n    const userOrderConfirmation = () => {\n    setOrderConfirmation(true);\n    setOrderSummary(false);\n    setPaymentOption(true);\n  };\n    const onConfirmOrder = () => {\n    const totalAmount = Object.keys(cart.cartItems).reduce(\n      (totalPrice, key) => {\n        const { price, qty } = cart.cartItems[key];\n        return totalPrice + price * qty;\n      },\n      0\n    );\n    const items = Object.keys(cart.cartItems).map((key) => ({\n      productId: key,\n      payablePrice: cart.cartItems[key].price,\n      purchasedQty: cart.cartItems[key].qty,\n    }));\n    const payload = {\n      addressId: selectedAddress._id,\n      totalAmount,\n      items,\n      paymentStatus: \"pending\",\n      paymentType: \"cod\",\n    };\n      console.log(payload);\n    dispatch(addOrder(payload));\n    setConfirmOrder(true);\n  }; */\n\n\n  useEffect(() => {\n    auth.authenticate && dispatch(getAddress()); //auth.authenticate && dispatch(getCartItems());\n  }, [auth.authenticate]);\n  useEffect(() => {\n    const address = user.address.map(adr => ({ ...adr,\n      selected: false,\n      edit: false\n    }));\n    setAddress(address); //user.address.length === 0 && setNewAddress(true);\n  }, [user.address]);\n  /* useEffect(() => {\n    if (confirmOrder && user.placedOrderId) {\n      props.history.push(`/order_details/${user.placedOrderId}`);\n    }\n  }, [user.placedOrderId]); */\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cartContainer\",\n      style: {\n        alignItems: \"flex-start\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkoutContainer\",\n        children: [/*#__PURE__*/_jsxDEV(CheckoutStep, {\n          stepNumber: \"1\",\n          title: \"LOGIN\",\n          active: !auth.authenticate,\n          body: auth.authenticate ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loggedInId\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: 500\n              },\n              children: auth.user.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                margin: \"0 5px\"\n              },\n              children: auth.user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(MaterialInput, {\n              label: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CheckoutStep, {\n          stepNumber: \"2\",\n          title: \"DELIVERY ADDRESS\",\n          active: !confirmAddress && auth.authenticate,\n          body: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [confirmAddress ? JSON.stringify(selectedAddress) : address.map(adr => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flexRow addressContainer\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  name: \"address\",\n                  onClick: () => selectAddress(adr),\n                  type: \"radio\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flexRow sb addressinfo\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: adr.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 233,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: adr.addressType\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 234,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: adr.mobileNumber\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 235,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: adr.address\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 29\n                  }, this), adr.selected && /*#__PURE__*/_jsxDEV(MaterialButton, {\n                    title: \"DELIVERY HERE\",\n                    onClick: () => confirmDeliveryAddress(adr),\n                    style: {\n                      width: '250px'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 47\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 27\n                }, this), adr.selected && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 44\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 23\n            }, this)), confirmAddress ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stepCompleted\",\n              children: `${selectedAddress.name} ${selectedAddress.address} - ${selectedAddress.pinCode}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this) : address.map(adr => /*#__PURE__*/_jsxDEV(Address, {\n              selectAddress: selectAddress,\n              enableAddressEditForm: enableAddressEditForm,\n              confirmDeliveryAddress: confirmDeliveryAddress,\n              onAddressSubmit: onAddressSubmit,\n              adr: adr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), confirmAddress ? null : newAddress ? /*#__PURE__*/_jsxDEV(AddressForm, {\n          onSubmitForm: onAddressSubmit,\n          onCancel: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this) :\n        /*#__PURE__*/\n\n        /* auth.authenticate ? ( */\n        _jsxDEV(CheckoutStep, {\n          stepNumber: \"+\",\n          title: \"ADD NEW ADDRESS\",\n          active: false,\n          onClick: () => setNewAddress(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this) //) : null\n        , /*#__PURE__*/_jsxDEV(CheckoutStep, {\n          stepNumber: \"3\",\n          title: \"ORDER SUMMARY\"\n          /* active={orderSummary}\n          body={\n              orderSummary ? (\n                  <CartPage onlyCartItems={true} />\n              ) : orderConfirmation ? (\n                  <div className=\"stepCompleted\">\n                      {Object.keys(cart.cartItems).length} items\n                  </div>\n              ) : null\n          } */\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CheckoutStep, {\n          stepNumber: \"4\",\n          title: \"PAYMENT OPTIONS\"\n          /* active={paymentOption}\n          body={\n              paymentOption && (\n                  <div>\n                      <div\n                          className=\"flexRow\"\n                          style={{\n                              alignItems: \"center\",\n                              padding: \"20px\",\n                          }}\n                      >\n                          <input type=\"radio\" name=\"paymentOption\" value=\"cod\" />\n                          <div>Cash on delivery</div>\n                      </div>\n                      <MaterialButton\n                          title=\"CONFIRM ORDER\"\n                          onClick={onConfirmOrder}\n                          style={{\n                              width: \"200px\",\n                              margin: \"0 0 20px 20px\",\n                          }}\n                      />\n                  </div>\n              )\n          } */\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PriceDetails, {\n        totalItem: Object.keys(cart.cartItems).reduce(function (qty, key) {\n          return qty + cart.cartItems[key].qty;\n        }, 0),\n        totalPrice: Object.keys(cart.cartItems).reduce((totalPrice, key) => {\n          const {\n            price,\n            qty\n          } = cart.cartItems[key];\n          return totalPrice + price * qty;\n        }, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutPage, \"kz2QANqQqFbjefZ3iJrATQmOCzQ=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c2 = CheckoutPage;\nexport default CheckoutPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckoutStep\");\n$RefreshReg$(_c2, \"CheckoutPage\");","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/containers/CheckoutPage/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","addOrder","getAddress","getCartItems","Layout","Anchor","MaterialButton","MaterialInput","PriceDetails","Card","CartPage","AddressForm","CheckoutStep","props","onClick","active","stepNumber","title","body","CheckoutPage","user","state","auth","newAddress","setNewAddress","address","setAddress","confirmAddress","setConfirmAddress","selectedAddress","setSelectedAddress","cart","dispatch","onAddressSubmit","addr","selectAddress","updatedAddress","map","adr","_id","selected","confirmDeliveryAddress","authenticate","edit","alignItems","fontWeight","fullName","margin","email","JSON","stringify","name","addressType","mobileNumber","width","pinCode","enableAddressEditForm","Object","keys","cartItems","reduce","qty","key","totalPrice","price"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addOrder, getAddress, getCartItems } from \"../../actions\";\nimport Layout from \"../../components/Layout\";\nimport {\n  Anchor,\n  MaterialButton,\n  MaterialInput,\n} from \"../../components/MaterialUI\";\nimport PriceDetails from \"../../components/PriceDetails\";\nimport Card from \"../../components/UI/Card\";\nimport CartPage from \"../CartPage\";\nimport AddressForm from \"./AddressForm\";\n\nimport \"./style.css\";\n\n/**\n * @author\n * @function CheckoutPage\n **/\n\nconst CheckoutStep = (props) => {\n  return (\n    <div className=\"checkoutStep\">\n      <div\n        onClick={props.onClick}\n        className={`checkoutHeader ${props.active && \"active\"}`}\n      >\n        <div>\n          <span className=\"stepNumber\">{props.stepNumber}</span>\n          <span className=\"stepTitle\">{props.title}</span>\n        </div>\n      </div>\n      {props.body && props.body}\n    </div>\n  );\n};\n\n/* const Address = ({\n  adr,\n  selectAddress,\n  enableAddressEditForm,\n  confirmDeliveryAddress,\n  onAddressSubmit,\n}) => {\n  return (\n    <div className=\"flexRow addressContainer\">\n      <div>\n        <input name=\"address\" onClick={() => selectAddress(adr)} type=\"radio\" />\n      </div>\n      <div className=\"flexRow sb addressinfo\">\n        {!adr.edit ? (\n          <div style={{ width: \"100%\" }}>\n            <div className=\"addressDetail\">\n              <div>\n                <span className=\"addressName\">{adr.name}</span>\n                <span className=\"addressType\">{adr.addressType}</span>\n                <span className=\"addressMobileNumber\">{adr.mobileNumber}</span>\n              </div>\n              {adr.selected && (\n                <Anchor\n                  name=\"EDIT\"\n                  onClick={() => enableAddressEditForm(adr)}\n                  style={{\n                    fontWeight: \"500\",\n                    color: \"#2874f0\",\n                  }}\n                />\n              )}\n            </div>\n            <div className=\"fullAddress\">\n              {adr.address} <br /> {`${adr.state} - ${adr.pinCode}`}\n            </div>\n            {adr.selected && (\n              <MaterialButton\n                title=\"DELIVERY HERE\"\n                onClick={() => confirmDeliveryAddress(adr)}\n                style={{\n                  width: \"200px\",\n                  margin: \"10px 0\",\n                }}\n              />\n            )}\n          </div>\n        ) : (\n          <AddressForm\n            withoutLayout={true}\n            onSubmitForm={onAddressSubmit}\n            initialData={adr}\n            onCancel={() => {}}\n          />\n        )}\n      </div>\n    </div>\n  );\n}; */\n\nconst CheckoutPage = (props) => {\n  const user = useSelector((state) => state.user);\n  const auth = useSelector((state) => state.auth);\n  const [newAddress, setNewAddress] = useState(false);\n  const [address, setAddress] = useState([]);\n  const [confirmAddress, setConfirmAddress] = useState(false);\n  const [selectedAddress, setSelectedAddress] = useState(null);\n  //const [orderSummary, setOrderSummary] = useState(false);\n  //const [orderConfirmation, setOrderConfirmation] = useState(false);\n  //const [paymentOption, setPaymentOption] = useState(false);\n  //const [confirmOrder, setConfirmOrder] = useState(false);\n  const cart = useSelector((state) => state.cart);\n  const dispatch = useDispatch();\n\n  const onAddressSubmit = (addr) => {\n    /* setSelectedAddress(addr);\n    setConfirmAddress(true);\n    setOrderSummary(true); */\n  };\n\n\n  const selectAddress = (addr) => {\n    //console.log(addr);\n    const updatedAddress = address.map((adr) =>\n      adr._id === addr._id\n        ? { ...adr, selected: true }\n        : { ...adr, selected: false }\n    );\n    setAddress(updatedAddress);\n  };\n\n  const confirmDeliveryAddress = (addr) => {\n    setSelectedAddress(addr);\n    setConfirmAddress(true);\n    //setOrderSummary(true);\n  };\n\n  /* const enableAddressEditForm = (addr) => {\n    const updatedAddress = address.map((adr) =>\n      adr._id === addr._id ? { ...adr, edit: true } : { ...adr, edit: false }\n    );\n    setAddress(updatedAddress);\n  };\n \n  const userOrderConfirmation = () => {\n    setOrderConfirmation(true);\n    setOrderSummary(false);\n    setPaymentOption(true);\n  };\n \n  const onConfirmOrder = () => {\n    const totalAmount = Object.keys(cart.cartItems).reduce(\n      (totalPrice, key) => {\n        const { price, qty } = cart.cartItems[key];\n        return totalPrice + price * qty;\n      },\n      0\n    );\n    const items = Object.keys(cart.cartItems).map((key) => ({\n      productId: key,\n      payablePrice: cart.cartItems[key].price,\n      purchasedQty: cart.cartItems[key].qty,\n    }));\n    const payload = {\n      addressId: selectedAddress._id,\n      totalAmount,\n      items,\n      paymentStatus: \"pending\",\n      paymentType: \"cod\",\n    };\n \n    console.log(payload);\n    dispatch(addOrder(payload));\n    setConfirmOrder(true);\n  }; */\n\n  useEffect(() => {\n    auth.authenticate && dispatch(getAddress());\n    //auth.authenticate && dispatch(getCartItems());\n  }, [auth.authenticate]);\n\n  useEffect(() => {\n    const address = user.address.map((adr) => ({\n      ...adr,\n      selected: false,\n      edit: false,\n    }));\n    setAddress(address);\n    //user.address.length === 0 && setNewAddress(true);\n  }, [user.address]);\n\n  /* useEffect(() => {\n    if (confirmOrder && user.placedOrderId) {\n      props.history.push(`/order_details/${user.placedOrderId}`);\n    }\n  }, [user.placedOrderId]); */\n\n  return (\n    <Layout>\n      <div className=\"cartContainer\" style={{ alignItems: \"flex-start\" }}>\n        <div className=\"checkoutContainer\">\n          {/* check if user logged in or not */}\n          <CheckoutStep\n            stepNumber={\"1\"}\n            title={\"LOGIN\"}\n            active={!auth.authenticate}\n            body={\n              auth.authenticate ? (\n                <div className=\"loggedInId\">\n                  <span style={{ fontWeight: 500 }}>{auth.user.fullName}</span>\n                  <span style={{ margin: \"0 5px\" }}>{auth.user.email}</span>\n                </div>\n              ) : (\n                <div>\n                  <MaterialInput label=\"Email\" />\n                </div>\n              )\n            }\n          />\n          <CheckoutStep\n            stepNumber={\"2\"}\n            title={\"DELIVERY ADDRESS\"}\n            active={!confirmAddress && auth.authenticate}\n            body={\n              <>\n                {\n                  confirmAddress ? JSON.stringify(selectedAddress) :\n                    address.map(adr =>\n                      <div className='flexRow addressContainer'>\n                        <div>\n                          <input name='address' onClick={() => selectAddress(adr)} type='radio' />\n                        </div>\n                        <div className='flexRow sb addressinfo'>\n                          <div>\n                            <div>\n                              <span>{adr.name}</span>\n                              <span>{adr.addressType}</span>\n                              <span>{adr.mobileNumber}</span>\n                            </div>\n                            <div>\n                              {adr.address}\n                            </div>\n                            {\n                              adr.selected && <MaterialButton\n                                title=\"DELIVERY HERE\"\n                                onClick={() => confirmDeliveryAddress(adr)}\n                                style={{\n                                  width: '250px'\n                                }}\n                              />\n                            }\n\n                          </div>\n                          {adr.selected && <div>edit</div>}\n                        </div>\n                      </div>\n                    )\n                }\n                {confirmAddress ? (\n                  <div className=\"stepCompleted\">{`${selectedAddress.name} ${selectedAddress.address} - ${selectedAddress.pinCode}`}</div>\n                ) : (\n                  address.map((adr) => (\n                    <Address\n                      selectAddress={selectAddress}\n                      enableAddressEditForm={enableAddressEditForm}\n                      confirmDeliveryAddress={confirmDeliveryAddress}\n                      onAddressSubmit={onAddressSubmit}\n                      adr={adr}\n                    />\n                  ))\n                )}\n              </>\n            }\n          />\n          {/* AddressForm */}\n          {confirmAddress ? null : newAddress ? (\n            <AddressForm onSubmitForm={onAddressSubmit} onCancel={() => { }} />\n          ) : /* auth.authenticate ? ( */\n            <CheckoutStep\n              stepNumber={\"+\"}\n              title={\"ADD NEW ADDRESS\"}\n              active={false}\n              onClick={() => setNewAddress(true)}\n            />\n            //) : null\n          }\n\n          <CheckoutStep\n            stepNumber={\"3\"}\n            title={\"ORDER SUMMARY\"}\n          /* active={orderSummary}\n          body={\n              orderSummary ? (\n                  <CartPage onlyCartItems={true} />\n              ) : orderConfirmation ? (\n                  <div className=\"stepCompleted\">\n                      {Object.keys(cart.cartItems).length} items\n                  </div>\n              ) : null\n          } */\n          />\n\n          {/* {orderSummary && (\n                        <Card\n                            style={{\n                                margin: \"10px 0\",\n                            }}\n                        >\n                            <div\n                                className=\"flexRow sb\"\n                                style={{\n                                    padding: \"20px\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                <p style={{ fontSize: \"12px\" }}>\n                                    Order confirmation email will be sent to{\" \"}\n                                    <strong>{auth.user.email}</strong>\n                                </p>\n                                <MaterialButton\n                                    title=\"CONTINUE\"\n                                    onClick={userOrderConfirmation}\n                                    style={{\n                                        width: \"200px\",\n                                    }}\n                                />\n                            </div>\n                        </Card>\n                    )} */}\n\n          <CheckoutStep\n            stepNumber={\"4\"}\n            title={\"PAYMENT OPTIONS\"}\n          /* active={paymentOption}\n          body={\n              paymentOption && (\n                  <div>\n                      <div\n                          className=\"flexRow\"\n                          style={{\n                              alignItems: \"center\",\n                              padding: \"20px\",\n                          }}\n                      >\n                          <input type=\"radio\" name=\"paymentOption\" value=\"cod\" />\n                          <div>Cash on delivery</div>\n                      </div>\n                      <MaterialButton\n                          title=\"CONFIRM ORDER\"\n                          onClick={onConfirmOrder}\n                          style={{\n                              width: \"200px\",\n                              margin: \"0 0 20px 20px\",\n                          }}\n                      />\n                  </div>\n              )\n          } */\n          />\n        </div>\n\n        {/* Price Component */}\n        <PriceDetails\n                    totalItem={Object.keys(cart.cartItems).reduce(function (qty, key) {\n                        return qty + cart.cartItems[key].qty;\n                    }, 0)}\n                    totalPrice={Object.keys(cart.cartItems).reduce((totalPrice, key) => {\n                        const { price, qty } = cart.cartItems[key];\n                        return totalPrice + price * qty;\n                    }, 0)}\n                />\n      </div>\n    </Layout>\n  );\n};\n\nexport default CheckoutPage;"]},"metadata":{},"sourceType":"module"}
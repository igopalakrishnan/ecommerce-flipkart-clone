{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n      console.log(res);\n      /* if (res.status === 200) {\n        const { cartItems } = res.data;\n        //console.log({ getCartItems: cartItems });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems }\n          });\n        }\n      } */\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState(); //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [{\n          product: product._id,\n          quantity: qty\n        }]\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\n/* export const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; */\n\nexport const updateCart = () => {\n  return async dispatch => {\n    const {\n      auth\n    } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\")) : null;\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\"); //dispatch(getCartItems());\n\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id\n            };\n          })\n        };\n\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: {\n            cartItems\n          }\n        });\n      }\n    }\n  };\n};\nexport { getCartItems };","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/actions/cart.action.js"],"names":["axios","cartConstants","store","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","res","post","console","log","error","addToCart","product","newQty","cart","cartItems","auth","getState","qty","_id","parseInt","authenticate","payload","quantity","status","localStorage","setItem","JSON","stringify","ADD_TO_CART_SUCCESS","updateCart","getItem","parse","removeItem","Object","keys","map","key","index","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,aAAa,CAACK;AAAtB,OAAD,CAAR;AACA,YAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAY,oBAAZ,CAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK,KAdD,CAcE,OAAOI,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,GAlBD;AAmBD,CApBD;;AAsBA,OAAO,MAAMC,SAAS,GAAG,CAACC,OAAD,EAAUC,MAAM,GAAG,CAAnB,KAAyB;AAChD,SAAO,MAAOV,QAAP,IAAoB;AACzB,UAAM;AACJW,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF,OADF;AAEJC,MAAAA;AAFI,QAGFf,KAAK,CAACgB,QAAN,EAHJ,CADyB,CAKzB;AACA;AACA;;AACA,UAAMC,GAAG,GAAGH,SAAS,CAACH,OAAO,CAACO,GAAT,CAAT,GACRC,QAAQ,CAACL,SAAS,CAACH,OAAO,CAACO,GAAT,CAAT,CAAuBD,GAAvB,GAA6BL,MAA9B,CADA,GAER,CAFJ;AAGAE,IAAAA,SAAS,CAACH,OAAO,CAACO,GAAT,CAAT,GAAyB,EACvB,GAAGP,OADoB;AAEvBM,MAAAA;AAFuB,KAAzB;;AAKA,QAAIF,IAAI,CAACK,YAAT,EAAuB;AACrBlB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,aAAa,CAACK;AAAtB,OAAD,CAAR;AACA,YAAMiB,OAAO,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACAP,QAAAA,SAAS,EAAE,CACT;AACEH,UAAAA,OAAO,EAAEA,OAAO,CAACO,GADnB;AAEEI,UAAAA,QAAQ,EAAEL;AAFZ,SADS;AAPG,OAAhB;AAcAV,MAAAA,OAAO,CAACC,GAAR,CAAYa,OAAZ;AACA,YAAMhB,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAY,sBAAZ,EAAmCe,OAAnC,CAAlB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,UAAIA,GAAG,CAACkB,MAAJ,KAAe,GAAnB,EAAwB;AACtBrB,QAAAA,QAAQ,CAACD,YAAY,EAAb,CAAR;AACD;AACF,KAtBD,MAsBO;AACLuB,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeb,SAAf,CAA7B;AACD;;AAEDP,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BM,SAA3B;AAEAZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,aAAa,CAAC6B,mBADb;AAEPP,MAAAA,OAAO,EAAE;AAAEP,QAAAA;AAAF;AAFF,KAAD,CAAR;AAID,GAhDD;AAiDD,CAlDM;AAoDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMe,UAAU,GAAG,MAAM;AAC9B,SAAO,MAAO3B,QAAP,IAAoB;AACzB,UAAM;AAAEa,MAAAA;AAAF,QAAWf,KAAK,CAACgB,QAAN,EAAjB;AACA,QAAIF,SAAS,GAAGU,YAAY,CAACM,OAAb,CAAqB,MAArB,IACZJ,IAAI,CAACK,KAAL,CAAWP,YAAY,CAACM,OAAb,CAAqB,MAArB,CAAX,CADY,GAEZ,IAFJ;AAIAvB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AAEA,QAAIO,IAAI,CAACK,YAAT,EAAuB;AACrBI,MAAAA,YAAY,CAACQ,UAAb,CAAwB,MAAxB,EADqB,CAErB;;AACA,UAAIlB,SAAJ,EAAe;AACb,cAAMO,OAAO,GAAG;AACdP,UAAAA,SAAS,EAAEmB,MAAM,CAACC,IAAP,CAAYpB,SAAZ,EAAuBqB,GAAvB,CAA2B,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACpD,mBAAO;AACLf,cAAAA,QAAQ,EAAER,SAAS,CAACsB,GAAD,CAAT,CAAenB,GADpB;AAELN,cAAAA,OAAO,EAAEG,SAAS,CAACsB,GAAD,CAAT,CAAelB;AAFnB,aAAP;AAID,WALU;AADG,SAAhB;;AAQA,YAAIe,MAAM,CAACC,IAAP,CAAYpB,SAAZ,EAAuBwB,MAAvB,GAAgC,CAApC,EAAuC;AACrC,gBAAMjC,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAY,sBAAZ,EAAmCe,OAAnC,CAAlB;;AACA,cAAIhB,GAAG,CAACkB,MAAJ,KAAe,GAAnB,EAAwB;AACtBrB,YAAAA,QAAQ,CAACD,YAAY,EAAb,CAAR;AACD;AACF;AACF;AAEF,KApBD,MAoBO;AACL,UAAIa,SAAJ,EAAe;AACbZ,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEJ,aAAa,CAAC6B,mBADb;AAEPP,UAAAA,OAAO,EAAE;AAAEP,YAAAA;AAAF;AAFF,SAAD,CAAR;AAID;AACF;AACF,GApCD;AAqCD,CAtCM;AAwCP,SAASb,YAAT","sourcesContent":["import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const res = await axios.post(`/user/getCartItems`);\n      console.log(res);\n      /* if (res.status === 200) {\n        const { cartItems } = res.data;\n        //console.log({ getCartItems: cartItems });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems }\n          });\n        }\n      } */\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async (dispatch) => {\n    const {\n      cart: { cartItems },\n      auth,\n    } = store.getState();\n    //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n    const qty = cartItems[product._id]\n      ? parseInt(cartItems[product._id].qty + newQty)\n      : 1;\n    cartItems[product._id] = {\n      ...product,\n      qty,\n    };\n\n    if (auth.authenticate) {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [\n          {\n            product: product._id,\n            quantity: qty,\n          },\n        ],\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: { cartItems },\n    });\n  };\n};\n\n/* export const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; */\n\nexport const updateCart = () => {\n  return async (dispatch) => {\n    const { auth } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\")\n      ? JSON.parse(localStorage.getItem(\"cart\"))\n      : null;\n\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\");\n      //dispatch(getCartItems());\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id,\n            };\n          }),\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } \n      \n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: { cartItems },\n        });\n      }\n    }\n  };\n};\n\nexport { getCartItems };"]},"metadata":{},"sourceType":"module"}
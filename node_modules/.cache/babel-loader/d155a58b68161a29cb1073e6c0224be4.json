{"ast":null,"code":"//import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\nexport const addToCart = product => {\n  return async dispatch => {\n    const {\n      cartItems\n    } = store.getState().cart; //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + 1) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    dispatch({\n      type: cartConstants.ADD_TO_CART,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\n/* const getCartItems = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const res = await axios.post(`/user/getCartItems`);\n      if (res.status === 200) {\n        const { cartItems } = res.data;\n        console.log({ getCartItems: cartItems });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems },\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async (dispatch) => {\n    const {\n      cart: { cartItems },\n      auth,\n    } = store.getState();\n    //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n    const qty = cartItems[product._id]\n      ? parseInt(cartItems[product._id].qty + newQty)\n      : 1;\n    cartItems[product._id] = {\n      ...product,\n      qty,\n    };\n\n    if (auth.authenticate) {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [\n          {\n            product: product._id,\n            quantity: qty,\n          },\n        ],\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: { cartItems },\n    });\n  };\n};\n\nexport const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const updateCart = () => {\n  return async (dispatch) => {\n    const { auth } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\")\n      ? JSON.parse(localStorage.getItem(\"cart\"))\n      : null;\n\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\");\n      //dispatch(getCartItems());\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id,\n            };\n          }),\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: { cartItems },\n        });\n      }\n    }\n  };\n}; */\n\nexport const updateCart = () => {\n  return async dispatch => {\n    const cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\n\n    if (cartItems) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART,\n        payload: {\n          cartItems\n        }\n      });\n    }\n  };\n}; //export { getCartItems };","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/actions/cart.action.js"],"names":["cartConstants","store","addToCart","product","dispatch","cartItems","getState","cart","qty","_id","parseInt","localStorage","setItem","JSON","stringify","type","ADD_TO_CART","payload","updateCart","getItem","parse"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAGA,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa;AAClC,SAAO,MAAMC,QAAN,IAAkB;AACrB,UAAM;AAAEC,MAAAA;AAAF,QAAgBJ,KAAK,CAACK,QAAN,GAAiBC,IAAvC,CADqB,CAErB;AACA;AACA;;AACA,UAAMC,GAAG,GAAGH,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,GACNC,QAAQ,CAACL,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,CAAuBD,GAAvB,GAA6B,CAA9B,CADF,GAEN,CAFN;AAGAH,IAAAA,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,GAAyB,EACrB,GAAGN,OADkB;AAErBK,MAAAA;AAFqB,KAAzB;AAIAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAA7B;AACAD,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEf,aAAa,CAACgB,WADf;AAELC,MAAAA,OAAO,EAAE;AAAEZ,QAAAA;AAAF;AAFJ,KAAD,CAAR;AAIH,GAjBD;AAkBH,CAnBM;AAqa,UAAU,GAAG,MAAM;AAC5B,SAAO,MAAMd,QAAN,IAAkB;AACrB,UAAMC,SAAS,GAAGM,YAAY,CAACQ,OAAb,CAAqB,MAArB,IAClBN,IAAI,CAACO,KAAL,CAAWT,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAX,CADkB,GACyB,IAD3C;;AAGA,QAAGd,SAAH,EAAc;AACVD,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAEf,aAAa,CAACgB,WADf;AAELC,QAAAA,OAAO,EAAE;AAAEZ,UAAAA;AAAF;AAFJ,OAAD,CAAR;AAIH;AACJ,GAVD;AAWH,CAZM,C,CAcP","sourcesContent":["//import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\n\nexport const addToCart = (product) => {\n    return async dispatch => {\n        const { cartItems } = store.getState().cart;\n        //console.log('action::products', products);\n        //const product = action.payload.product;\n        //const products = state.products;\n        const qty = cartItems[product._id]\n            ? parseInt(cartItems[product._id].qty + 1)\n            : 1;\n        cartItems[product._id] = {\n            ...product,\n            qty\n        };\n        localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n        dispatch({\n            type: cartConstants.ADD_TO_CART,\n            payload: { cartItems }\n          });\n    }\n}\n\n/* const getCartItems = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const res = await axios.post(`/user/getCartItems`);\n      if (res.status === 200) {\n        const { cartItems } = res.data;\n        console.log({ getCartItems: cartItems });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems },\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async (dispatch) => {\n    const {\n      cart: { cartItems },\n      auth,\n    } = store.getState();\n    //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n    const qty = cartItems[product._id]\n      ? parseInt(cartItems[product._id].qty + newQty)\n      : 1;\n    cartItems[product._id] = {\n      ...product,\n      qty,\n    };\n\n    if (auth.authenticate) {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [\n          {\n            product: product._id,\n            quantity: qty,\n          },\n        ],\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: { cartItems },\n    });\n  };\n};\n\nexport const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const updateCart = () => {\n  return async (dispatch) => {\n    const { auth } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\")\n      ? JSON.parse(localStorage.getItem(\"cart\"))\n      : null;\n\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\");\n      //dispatch(getCartItems());\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id,\n            };\n          }),\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: { cartItems },\n        });\n      }\n    }\n  };\n}; */\n\n\nexport const updateCart = () => {\n    return async dispatch => {\n        const cartItems = localStorage.getItem('cart') ?\n        JSON.parse(localStorage.getItem('cart')) : null\n\n        if(cartItems) {\n            dispatch({\n                type: cartConstants.ADD_TO_CART,\n                payload: { cartItems }\n            })\n        }\n    }\n}\n\n//export { getCartItems };"]},"metadata":{},"sourceType":"module"}
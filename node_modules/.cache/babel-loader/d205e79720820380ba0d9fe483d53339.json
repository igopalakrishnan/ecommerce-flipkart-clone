{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n\n      if (res.status === 200) {\n        const {\n          cartItems\n        } = res.data;\n        console.log({\n          getCartItems: cartItems\n        });\n\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cartItems\n    } = store.getState().cart;\n    /* const {\n        cart: { cartItems },\n        auth,\n    } = store.getState(); */\n    //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    dispatch({\n      type: cartConstants.ADD_TO_CART,\n      payload: {\n        cartItems\n      }\n    });\n    /* if (auth.authenticate) {\n        dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n        const payload = {\n            // cartItems: Object.keys(cartItems).map((key, index) => {\n            //     return {\n            //         quantity: cartItems[key].qty,\n            //         product: cartItems[key]._id\n            //     }\n            // })\n            cartItems: [\n                {\n                    product: product._id,\n                    quantity: qty,\n                },\n            ],\n        };\n        console.log(payload);\n        const res = await axios.post(`/user/cart/addtocart`, payload);\n        console.log(res);\n        if (res.status === 201) {\n            dispatch(getCartItems());\n        }\n    } else {\n        localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n     console.log(\"addToCart::\", cartItems);\n     dispatch({\n        type: cartConstants.ADD_TO_CART_SUCCESS,\n        payload: { cartItems },\n    }); */\n  };\n};\n/* export const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; */\n\nexport const updateCart = () => {\n  return async dispatch => {\n    const cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\n\n    if (cartItems) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART,\n        payload: {\n          cartItems\n        }\n      });\n    }\n    /* const { auth } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\")\n      ? JSON.parse(localStorage.getItem(\"cart\"))\n      : null;\n         console.log(\"upppppppppp\");\n         if (auth.authenticate) {\n      localStorage.removeItem(\"cart\");\n      //dispatch(getCartItems());\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id,\n            };\n          }),\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: { cartItems },\n        });\n      }\n    } */\n\n  };\n}; //export { getCartItems };","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/actions/cart.action.js"],"names":["axios","cartConstants","store","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","res","post","status","cartItems","data","console","log","ADD_TO_CART_SUCCESS","payload","error","addToCart","product","newQty","getState","cart","qty","_id","parseInt","localStorage","setItem","JSON","stringify","ADD_TO_CART","updateCart","getItem","parse"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAIA,MAAMC,YAAY,GAAG,MAAM;AACzB,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,aAAa,CAACK;AAAtB,OAAD,CAAR;AACA,YAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAY,oBAAZ,CAAlB;;AACA,UAAID,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAM;AAAEC,UAAAA;AAAF,YAAgBH,GAAG,CAACI,IAA1B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEV,UAAAA,YAAY,EAAEO;AAAhB,SAAZ;;AACA,YAAIA,SAAJ,EAAe;AACbN,UAAAA,QAAQ,CAAC;AACPC,YAAAA,IAAI,EAAEJ,aAAa,CAACa,mBADb;AAEPC,YAAAA,OAAO,EAAE;AAAEL,cAAAA;AAAF;AAFF,WAAD,CAAR;AAID;AACF;AACF,KAbD,CAaE,OAAOM,KAAP,EAAc;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,GAjBD;AAkBD,CAnBD;;AAqBA,OAAO,MAAMC,SAAS,GAAG,CAACC,OAAD,EAAUC,MAAM,GAAG,CAAnB,KAAyB;AAC9C,SAAO,MAAOf,QAAP,IAAoB;AACvB,UAAM;AAAEM,MAAAA;AAAF,QAAgBR,KAAK,CAACkB,QAAN,GAAiBC,IAAvC;AACA;AACR;AACA;AACA;AACQ;AACA;AACA;;AACA,UAAMC,GAAG,GAAGZ,SAAS,CAACQ,OAAO,CAACK,GAAT,CAAT,GACNC,QAAQ,CAACd,SAAS,CAACQ,OAAO,CAACK,GAAT,CAAT,CAAuBD,GAAvB,GAA6BH,MAA9B,CADF,GAEN,CAFN;AAGAT,IAAAA,SAAS,CAACQ,OAAO,CAACK,GAAT,CAAT,GAAyB,EACrB,GAAGL,OADkB;AAErBI,MAAAA;AAFqB,KAAzB;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAelB,SAAf,CAA7B;AACAN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEJ,aAAa,CAAC4B,WADf;AAELd,MAAAA,OAAO,EAAE;AAAEL,QAAAA;AAAF;AAFJ,KAAD,CAAR;AAKA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGK,GAvDD;AAwDH,CAzDM;AA2DP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMoB,UAAU,GAAG,MAAM;AAC5B,SAAO,MAAO1B,QAAP,IAAoB;AACvB,UAAMM,SAAS,GAAGe,YAAY,CAACM,OAAb,CAAqB,MAArB,IACdJ,IAAI,CAACK,KAAL,CAAWP,YAAY,CAACM,OAAb,CAAqB,MAArB,CAAX,CADc,GAC6B,IAD/C;;AAGA,QAAIrB,SAAJ,EAAe;AACXN,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEJ,aAAa,CAAC4B,WADf;AAELd,QAAAA,OAAO,EAAE;AAAEL,UAAAA;AAAF;AAFJ,OAAD,CAAR;AAIH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGK,GA9CD;AA+CH,CAhDM,C,CAmDP","sourcesContent":["import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\n\n\nconst getCartItems = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const res = await axios.post(`/user/getCartItems`);\n      if (res.status === 200) {\n        const { cartItems } = res.data;\n        console.log({ getCartItems: cartItems });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems },\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n    return async (dispatch) => {\n        const { cartItems } = store.getState().cart;\n        /* const {\n            cart: { cartItems },\n            auth,\n        } = store.getState(); */\n        //console.log('action::products', products);\n        //const product = action.payload.product;\n        //const products = state.products;\n        const qty = cartItems[product._id]\n            ? parseInt(cartItems[product._id].qty + newQty)\n            : 1;\n        cartItems[product._id] = {\n            ...product,\n            qty,\n        };\n\n        localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n        dispatch({\n            type: cartConstants.ADD_TO_CART,\n            payload: { cartItems }\n        });\n\n        /* if (auth.authenticate) {\n            dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n            const payload = {\n                // cartItems: Object.keys(cartItems).map((key, index) => {\n                //     return {\n                //         quantity: cartItems[key].qty,\n                //         product: cartItems[key]._id\n                //     }\n                // })\n                cartItems: [\n                    {\n                        product: product._id,\n                        quantity: qty,\n                    },\n                ],\n            };\n            console.log(payload);\n            const res = await axios.post(`/user/cart/addtocart`, payload);\n            console.log(res);\n            if (res.status === 201) {\n                dispatch(getCartItems());\n            }\n        } else {\n            localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n        }\n\n        console.log(\"addToCart::\", cartItems);\n\n        dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems },\n        }); */\n    };\n};\n\n/* export const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; */\n\nexport const updateCart = () => {\n    return async (dispatch) => {\n        const cartItems = localStorage.getItem('cart') ?\n            JSON.parse(localStorage.getItem('cart')) : null\n\n        if (cartItems) {\n            dispatch({\n                type: cartConstants.ADD_TO_CART,\n                payload: { cartItems }\n            })\n        }\n        /* const { auth } = store.getState();\n        let cartItems = localStorage.getItem(\"cart\")\n          ? JSON.parse(localStorage.getItem(\"cart\"))\n          : null;\n    \n        console.log(\"upppppppppp\");\n    \n        if (auth.authenticate) {\n          localStorage.removeItem(\"cart\");\n          //dispatch(getCartItems());\n          if (cartItems) {\n            const payload = {\n              cartItems: Object.keys(cartItems).map((key, index) => {\n                return {\n                  quantity: cartItems[key].qty,\n                  product: cartItems[key]._id,\n                };\n              }),\n            };\n            if (Object.keys(cartItems).length > 0) {\n              const res = await axios.post(`/user/cart/addtocart`, payload);\n              if (res.status === 201) {\n                dispatch(getCartItems());\n              }\n            }\n          } else {\n            dispatch(getCartItems());\n          }\n        } else {\n          if (cartItems) {\n            dispatch({\n              type: cartConstants.ADD_TO_CART_SUCCESS,\n              payload: { cartItems },\n            });\n          }\n        } */\n    };\n};\n\n\n//export { getCartItems };"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { authConstants, cartConstants } from \"./constants\";\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(`/signin`, { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: 'Fail to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    localStorage.removeItem('user');\n    localStorage.removeItem('token'); //localStorage.clear();\n\n    dispatch({\n      type: authConstants.LOGOUT_SUCCESS\n    });\n    dispatch({\n      type: cartConstants.RESET_CART\n    }); //const res = await axios.post(`/admin/signout`);\n    // if(res.status === 200){\n    // }else{\n    //     dispatch({\n    //         type: authConstants.LOGOUT_FAILURE,\n    //         payload: { error: res.data.error }\n    //     });\n    // }\n  };\n};","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/actions/auth.action.js"],"names":["axios","authConstants","cartConstants","login","user","console","log","dispatch","type","LOGIN_REQUEST","res","post","status","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","isUserLoggedIn","getItem","parse","signout","LOGOUT_REQUEST","removeItem","LOGOUT_SUCCESS","RESET_CART"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,aAA7C;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAE3BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,SAAO,MAAOG,QAAP,IAAoB;AAEvBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,aAAa,CAACQ;AAAtB,KAAD,CAAR;AAEA,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAY,SAAZ,EAAsB,EACpC,GAAGP;AADiC,KAAtB,CAAlB;;AAIA,QAAIM,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACpB,YAAM;AAAEC,QAAAA,KAAF;AAAST,QAAAA;AAAT,UAAkBM,GAAG,CAACI,IAA5B;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAed,IAAf,CAA7B;AACAG,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEP,aAAa,CAACkB,aADf;AAELC,QAAAA,OAAO,EAAE;AACLP,UAAAA,KADK;AACET,UAAAA;AADF;AAFJ,OAAD,CAAR;AAMH,KAVD,MAUO;AACH,UAAIM,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACpBL,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEP,aAAa,CAACoB,aADf;AAELD,UAAAA,OAAO,EAAE;AAAEE,YAAAA,KAAK,EAAEZ,GAAG,CAACI,IAAJ,CAASQ;AAAlB;AAFJ,SAAD,CAAR;AAIH;AACJ;AACJ,GA1BD;AA2BH,CA/BM;AAmCP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,SAAO,MAAMhB,QAAN,IAAkB;AACrB,UAAMM,KAAK,GAAGE,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIX,KAAJ,EAAW;AACP,YAAMT,IAAI,GAAGa,IAAI,CAACQ,KAAL,CAAWV,YAAY,CAACS,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAjB,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEP,aAAa,CAACkB,aADf;AAELC,QAAAA,OAAO,EAAE;AACLP,UAAAA,KADK;AACET,UAAAA;AADF;AAFJ,OAAD,CAAR;AAOH,KATD,MASO;AACHG,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEP,aAAa,CAACoB,aADf;AAELD,QAAAA,OAAO,EAAE;AAAEE,UAAAA,KAAK,EAAE;AAAT;AAFJ,OAAD,CAAR;AAIH;AACJ,GAjBD;AAkBH,CAnBM;AAsBP,OAAO,MAAMI,OAAO,GAAG,MAAM;AACzB,SAAO,MAAOnB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,aAAa,CAAC0B;AAAtB,KAAD,CAAR;AACAZ,IAAAA,YAAY,CAACa,UAAb,CAAwB,MAAxB;AACAb,IAAAA,YAAY,CAACa,UAAb,CAAwB,OAAxB,EAHyB,CAIzB;;AACArB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,aAAa,CAAC4B;AAAtB,KAAD,CAAR;AACAtB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,aAAa,CAAC4B;AAAtB,KAAD,CAAR,CANyB,CAOzB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACD,GAhBD;AAiBD,CAlBI","sourcesContent":["import axios from \"../helpers/axios\";\nimport { authConstants, cartConstants } from \"./constants\";\n\nexport const login = (user) => {\n\n    console.log(user);\n\n    return async (dispatch) => {\n\n        dispatch({ type: authConstants.LOGIN_REQUEST });\n\n        const res = await axios.post(`/signin`, {\n            ...user\n        });\n\n        if (res.status === 200) {\n            const { token, user } = res.data;\n            localStorage.setItem('token', token);\n            localStorage.setItem('user', JSON.stringify(user));\n            dispatch({\n                type: authConstants.LOGIN_SUCCESS,\n                payload: {\n                    token, user\n                }\n            });\n        } else {\n            if (res.status === 400) {\n                dispatch({\n                    type: authConstants.LOGIN_FAILURE,\n                    payload: { error: res.data.error }\n                });\n            }\n        }\n    }\n}\n\n\n\nexport const isUserLoggedIn = () => {\n    return async dispatch => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            const user = JSON.parse(localStorage.getItem('user'));\n            dispatch({\n                type: authConstants.LOGIN_SUCCESS,\n                payload: {\n                    token, user\n                }\n            });\n\n        } else {\n            dispatch({\n                type: authConstants.LOGIN_FAILURE,\n                payload: { error: 'Fail to login' }\n            });\n        }\n    }\n}\n\n\nexport const signout = () => {\n    return async (dispatch) => {\n      dispatch({ type: authConstants.LOGOUT_REQUEST });\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      //localStorage.clear();\n      dispatch({ type: authConstants.LOGOUT_SUCCESS });\n      dispatch({ type: cartConstants.RESET_CART });\n      //const res = await axios.post(`/admin/signout`);\n      // if(res.status === 200){\n  \n      // }else{\n      //     dispatch({\n      //         type: authConstants.LOGOUT_FAILURE,\n      //         payload: { error: res.data.error }\n      //     });\n      // }\n    };\n  };\n  "]},"metadata":{},"sourceType":"module"}
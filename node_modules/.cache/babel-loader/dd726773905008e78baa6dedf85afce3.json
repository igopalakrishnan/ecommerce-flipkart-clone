{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n      /* if (res.status === 200) {\n        const { cartItems } = res.data;\n        console.log({ getCartItems: cartItems });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems },\n          });\n        }\n      } */\n\n      if (res.status === 200) {\n        const {\n          cart\n        } = res.data;\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: cart\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState(); //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [{\n          product: product._id,\n          quantity: qty\n        }]\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\n/* export const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; */\n\nexport const updateCart = () => {\n  return async dispatch => {\n    const {\n      auth\n    } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\")) : null;\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\"); //dispatch(getCartItems());\n\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id\n            };\n          })\n        };\n\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: {\n            cartItems\n          }\n        });\n      }\n    }\n  };\n};\nexport { getCartItems };","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/actions/cart.action.js"],"names":["axios","cartConstants","store","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","res","post","status","cart","data","ADD_TO_CART_SUCCESS","payload","error","console","log","addToCart","product","newQty","cartItems","auth","getState","qty","_id","parseInt","authenticate","quantity","localStorage","setItem","JSON","stringify","updateCart","getItem","parse","removeItem","Object","keys","map","key","index","length"],"mappings":"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","sourcesContent":["import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const res = await axios.post(`/user/getCartItems`);\n      /* if (res.status === 200) {\n        const { cartItems } = res.data;\n        console.log({ getCartItems: cartItems });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems },\n          });\n        }\n      } */\n      if (res.status === 200) {\n        const { cart } = res.data;\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload:  cart \n        })\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async (dispatch) => {\n    const {\n      cart: { cartItems },\n      auth,\n    } = store.getState();\n    //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n    const qty = cartItems[product._id]\n      ? parseInt(cartItems[product._id].qty + newQty)\n      : 1;\n    cartItems[product._id] = {\n      ...product,\n      qty,\n    };\n\n    if (auth.authenticate) {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [\n          {\n            product: product._id,\n            quantity: qty,\n          },\n        ],\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: { cartItems },\n    });\n  };\n};\n\n/* export const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; */\n\nexport const updateCart = () => {\n  return async (dispatch) => {\n    const { auth } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\")\n      ? JSON.parse(localStorage.getItem(\"cart\"))\n      : null;\n\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\");\n      //dispatch(getCartItems());\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id,\n            };\n          }),\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: { cartItems },\n        });\n      }\n    }\n  };\n};\n\nexport { getCartItems };"]},"metadata":{},"sourceType":"module"}
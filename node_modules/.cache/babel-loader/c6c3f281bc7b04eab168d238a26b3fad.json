{"ast":null,"code":"import { cartConstants, userConstants } from \"./constants\";\nimport axios from \"../helpers/axios\";\nexport const getAddress = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`/user/getaddress`);\n      dispatch({\n        type: userConstants.GET_USER_ADDRESS_REQUEST\n      });\n\n      if (res.status === 200) {\n        const {\n          userAddress: {\n            address\n          }\n        } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ADDRESS_SUCCESS,\n          payload: {\n            address\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ADDRESS_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const addAddress = payload => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`/user/address/create`, {\n        payload\n      });\n      dispatch({\n        type: userConstants.ADD_USER_ADDRESS_REQUEST\n      });\n\n      if (res.status === 201) {\n        console.log(res);\n        const {\n          address: {\n            address\n          }\n        } = res.data;\n        dispatch({\n          type: userConstants.ADD_USER_ADDRESS_SUCCESS,\n          payload: {\n            address\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: userConstants.ADD_USER_ADDRESS_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const addOrder = payload => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`/addOrder`, payload);\n      dispatch({\n        type: userConstants.ADD_USER_ORDER_REQUEST\n      });\n\n      if (res.status === 201) {\n        console.log(res); //const { order } = res.data;\n\n        dispatch({\n          type: cartConstants.RESET_CART\n        });\n        /* dispatch({\n          type: userConstants.ADD_USER_ORDER_SUCCESS,\n          payload: { order },\n        }); */\n        // const {\n        //   address: { address },\n        // } = res.data;\n        // dispatch({\n        //   type: userConstants.ADD_USER_ADDRESS_SUCCESS,\n        //   payload: { address },\n        // });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: userConstants.ADD_USER_ORDER_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const getOrders = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(`/getOrders`);\n      dispatch({\n        type: userConstants.GET_USER_ORDER_REQUEST\n      });\n\n      if (res.status === 200) {\n        console.log(res);\n        const {\n          orders\n        } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ORDER_SUCCESS,\n          payload: {\n            orders\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ORDER_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; // single order with complete info and delivery location\n\nexport const getOrder = payload => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`/getOrder`, payload);\n      dispatch({\n        type: userConstants.GET_USER_ORDER_DETAILS_REQUEST\n      });\n\n      if (res.status === 200) {\n        console.log(res);\n        const {\n          order\n        } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ORDER_DETAILS_SUCCESS,\n          payload: {\n            order\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ORDER_DETAILS_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/gokul/Documents/M/ecommerce/ecommerce-flipkart-clone/src/actions/user.action.js"],"names":["cartConstants","userConstants","axios","getAddress","dispatch","res","post","type","GET_USER_ADDRESS_REQUEST","status","userAddress","address","data","GET_USER_ADDRESS_SUCCESS","payload","error","GET_USER_ADDRESS_FAILURE","console","log","addAddress","ADD_USER_ADDRESS_REQUEST","ADD_USER_ADDRESS_SUCCESS","ADD_USER_ADDRESS_FAILURE","addOrder","ADD_USER_ORDER_REQUEST","RESET_CART","ADD_USER_ORDER_FAILURE","getOrders","get","GET_USER_ORDER_REQUEST","orders","GET_USER_ORDER_SUCCESS","GET_USER_ORDER_FAILURE","getOrder","GET_USER_ORDER_DETAILS_REQUEST","order","GET_USER_ORDER_DETAILS_SUCCESS","GET_USER_ORDER_DETAILS_FAILURE"],"mappings":"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","sourcesContent":["import { cartConstants, userConstants } from \"./constants\";\nimport axios from \"../helpers/axios\";\n\nexport const getAddress = () => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.post(`/user/getaddress`);\n      dispatch({ type: userConstants.GET_USER_ADDRESS_REQUEST });\n      if (res.status === 200) {\n        const {\n          userAddress: { address },\n        } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ADDRESS_SUCCESS,\n          payload: { address },\n        });\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ADDRESS_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addAddress = (payload) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.post(`/user/address/create`, { payload });\n      dispatch({ type: userConstants.ADD_USER_ADDRESS_REQUEST });\n      if (res.status === 201) {\n        console.log(res);\n        const {\n          address: { address },\n        } = res.data;\n        dispatch({\n          type: userConstants.ADD_USER_ADDRESS_SUCCESS,\n          payload: { address },\n        });\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: userConstants.ADD_USER_ADDRESS_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addOrder = (payload) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.post(`/addOrder`, payload);\n      dispatch({ type: userConstants.ADD_USER_ORDER_REQUEST });\n      if (res.status === 201) {\n        console.log(res);\n        //const { order } = res.data;\n        dispatch({\n          type: cartConstants.RESET_CART,\n        });\n        /* dispatch({\n          type: userConstants.ADD_USER_ORDER_SUCCESS,\n          payload: { order },\n        }); */\n        // const {\n        //   address: { address },\n        // } = res.data;\n        // dispatch({\n        //   type: userConstants.ADD_USER_ADDRESS_SUCCESS,\n        //   payload: { address },\n        // });\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: userConstants.ADD_USER_ORDER_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const getOrders = () => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.get(`/getOrders`);\n      dispatch({ type: userConstants.GET_USER_ORDER_REQUEST });\n      if (res.status === 200) {\n        console.log(res);\n        const { orders } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ORDER_SUCCESS,\n          payload: { orders },\n        });\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ORDER_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// single order with complete info and delivery location\nexport const getOrder = (payload) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.post(`/getOrder`, payload);\n      dispatch({ type: userConstants.GET_USER_ORDER_DETAILS_REQUEST });\n      if (res.status === 200) {\n        console.log(res);\n        const { order } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ORDER_DETAILS_SUCCESS,\n          payload: { order },\n        });\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: userConstants.GET_USER_ORDER_DETAILS_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}
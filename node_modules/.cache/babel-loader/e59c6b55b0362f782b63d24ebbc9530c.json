{"ast":null,"code":"//import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n\n      if (res.status === 200) {\n        const {\n          cartItems\n        } = res.data;\n        console.log({\n          getCartItems: cartItems\n        });\n\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState(); //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [{\n          product: product._id,\n          quantity: qty\n        }]\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\n/* export const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const updateCart = () => {\n  return async (dispatch) => {\n    const { auth } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\")\n      ? JSON.parse(localStorage.getItem(\"cart\"))\n      : null;\n\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\");\n      //dispatch(getCartItems());\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id,\n            };\n          }),\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: { cartItems },\n        });\n      }\n    }\n  };\n}; */\n\nexport { getCartItems };","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/actions/cart.action.js"],"names":["cartConstants","store","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","res","axios","post","status","cartItems","data","console","log","ADD_TO_CART_SUCCESS","payload","error","addToCart","product","newQty","cart","auth","getState","qty","_id","parseInt","authenticate","quantity","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["//import axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const res = await axios.post(`/user/getCartItems`);\n      if (res.status === 200) {\n        const { cartItems } = res.data;\n        console.log({ getCartItems: cartItems });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems },\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async (dispatch) => {\n    const {\n      cart: { cartItems },\n      auth,\n    } = store.getState();\n    //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n    const qty = cartItems[product._id]\n      ? parseInt(cartItems[product._id].qty + newQty)\n      : 1;\n    cartItems[product._id] = {\n      ...product,\n      qty,\n    };\n\n    if (auth.authenticate) {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [\n          {\n            product: product._id,\n            quantity: qty,\n          },\n        ],\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: { cartItems },\n    });\n  };\n};\n\n/* export const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const updateCart = () => {\n  return async (dispatch) => {\n    const { auth } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\")\n      ? JSON.parse(localStorage.getItem(\"cart\"))\n      : null;\n\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\");\n      //dispatch(getCartItems());\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id,\n            };\n          }),\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: { cartItems },\n        });\n      }\n    }\n  };\n}; */\n\nexport { getCartItems };"]},"metadata":{},"sourceType":"module"}
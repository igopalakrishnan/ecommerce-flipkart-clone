{"ast":null,"code":"import { categoryConstants } from \"../actions/constants\";\nconst initialState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id === parentId) {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, [...cat.children, {\n          _id: category._id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log('updated categories', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initialState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/reducers/category.reducer.js"],"names":["categoryConstants","initialState","categories","loading","error","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","children","cat","push","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWJ,UAAX,EAAuBK,QAAvB,KAAoC;AAE3D,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAGF,QAAQ,IAAIG,SAAf,EAA0B;AACtB,WAAO,CACH,GAAGP,UADA,EAEH;AACIQ,MAAAA,GAAG,EAAEH,QAAQ,CAACG,GADlB;AAEIC,MAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFnB;AAGIC,MAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHnB;AAIIC,MAAAA,QAAQ,EAAE;AAJd,KAFG,CAAP;AASH;;AAED,OAAK,IAAIC,GAAT,IAAgBZ,UAAhB,EAA4B;AAExB,QAAIY,GAAG,CAACJ,GAAJ,KAAYJ,QAAhB,EAA0B;AAEtBE,MAAAA,YAAY,CAACO,IAAb,CAAkB,EACd,GAAGD,GADW;AAEdD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAeR,kBAAkB,CAACC,QAAD,EAAW,CAAC,GAAGQ,GAAG,CAACD,QAAR,EAAkB;AACpEH,UAAAA,GAAG,EAAEH,QAAQ,CAACG,GADsD;AAEpEC,UAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFqD;AAGpEC,UAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHqD;AAIpEN,UAAAA,QAAQ,EAAEC,QAAQ,CAACD,QAJiD;AAKpEO,UAAAA,QAAQ,EAAEN,QAAQ,CAACM;AALiD,SAAlB,CAAX,EAMvCN,QANuC,CAAjC,GAMM;AARF,OAAlB;AAWH,KAbD,MAaO;AACHC,MAAAA,YAAY,CAACO,IAAb,CAAkB,EACd,GAAGD,GADW;AAEdD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAeR,kBAAkB,CAACC,QAAD,EAAWQ,GAAG,CAACD,QAAf,EAAyBN,QAAzB,CAAjC,GAAsE;AAFlE,OAAlB;AAIH;AAEJ;;AAED,SAAOC,YAAP;AACH,CAzCD;;AA4CA,gBAAe,CAACQ,KAAK,GAAGf,YAAT,EAAuBgB,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKlB,iBAAiB,CAACmB,0BAAvB;AACIH,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,UAAU,EAAEe,MAAM,CAACG,OAAP,CAAelB;AAFvB,OAAR;AAIA;;AACJ,SAAKF,iBAAiB,CAACqB,wBAAvB;AACIL,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJb,QAAAA,OAAO,EAAE;AAFL,OAAR;AAIA;;AACJ,SAAKH,iBAAiB,CAACsB,wBAAvB;AAEI,YAAMf,QAAQ,GAAGU,MAAM,CAACG,OAAP,CAAeb,QAAhC;AACA,YAAMgB,iBAAiB,GAAGlB,kBAAkB,CAACE,QAAQ,CAACD,QAAV,EAAoBU,KAAK,CAACd,UAA1B,EAAsCK,QAAtC,CAA5C;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,iBAAlC;AACAP,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,UAAU,EAAEqB,iBAFR;AAGJpB,QAAAA,OAAO,EAAE;AAHL,OAAR;AAKA;;AACJ,SAAKH,iBAAiB,CAAC0B,wBAAvB;AACIV,MAAAA,KAAK,GAAG,EACJ,GAAGf;AADC,OAAR;AAGA;AA5BR;;AA+BA,SAAOe,KAAP;AACH,CAjCD","sourcesContent":["import { categoryConstants } from \"../actions/constants\"\n\nconst initialState = {\n    categories: [],\n    loading: false,\n    error: null\n}\n\nconst buildNewCategories = (parentId, categories, category) => {\n\n    let myCategories = [];\n\n    if(parentId == undefined) {\n        return [\n            ...categories,\n            {\n                _id: category._id,\n                name: category.name,\n                slug: category.slug,\n                children: []\n            }\n        ];\n    }\n\n    for (let cat of categories) {\n\n        if (cat._id === parentId) {\n\n            myCategories.push({\n                ...cat,\n                children: cat.children ? buildNewCategories(parentId, [...cat.children, {\n                    _id: category._id,\n                    name: category.name,\n                    slug: category.slug,\n                    parentId: category.parentId,\n                    children: category.children\n                }], category) : []\n            });\n\n        } else {\n            myCategories.push({\n                ...cat,\n                children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n            })\n        }\n\n    }\n\n    return myCategories;\n}\n\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n            state = {\n                ...state,\n                categories: action.payload.categories\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n            state = {\n                ...state,\n                loading: true\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n\n            const category = action.payload.category;\n            const updatedCategories = buildNewCategories(category.parentId, state.categories, category)\n            console.log('updated categories', updatedCategories);\n            state = {\n                ...state,\n                categories: updatedCategories,\n                loading: false\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n            state = {\n                ...initialState\n            }\n            break;\n    }\n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}
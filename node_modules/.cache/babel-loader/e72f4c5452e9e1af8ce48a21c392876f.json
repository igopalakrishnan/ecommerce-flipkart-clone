{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { authConstants, cartConstants } from \"./constants\";\nexport const signup = user => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: authConstants.SIGNUP_REQUEST\n      });\n      const res = await axios.post('/signup', user);\n\n      if (res.status === 201) {\n        dispatch({\n          type: authConstants.SIGNUP_SUCCESS\n        });\n        const {\n          token,\n          user\n        } = res.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        dispatch({\n          type: authConstants.LOGIN_SUCCESS,\n          payload: {\n            token,\n            user\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(`/signin`, { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: 'Fail to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    }); //localStorage.removeItem('user');\n    //localStorage.removeItem('token');\n\n    localStorage.clear();\n    dispatch({\n      type: authConstants.LOGOUT_SUCCESS\n    });\n    dispatch({\n      type: cartConstants.RESET_CART\n    }); //const res = await axios.post(`/admin/signout`);\n    // if(res.status === 200){\n    // }else{\n    //     dispatch({\n    //         type: authConstants.LOGOUT_FAILURE,\n    //         payload: { error: res.data.error }\n    //     });\n    // }\n  };\n};","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/flipkart-clone/src/actions/auth.action.js"],"names":["axios","authConstants","cartConstants","signup","user","dispatch","type","SIGNUP_REQUEST","res","post","status","SIGNUP_SUCCESS","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","error","console","log","login","LOGIN_REQUEST","LOGIN_FAILURE","isUserLoggedIn","getItem","parse","signout","LOGOUT_REQUEST","clear","LOGOUT_SUCCESS","RESET_CART"],"mappings":"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","sourcesContent":["import axios from \"../helpers/axios\";\nimport { authConstants, cartConstants } from \"./constants\";\n\n\nexport const signup = (user) => {\n    return async dispatch => {\n        try {\n            dispatch({ type: authConstants.SIGNUP_REQUEST });\n            const res = await axios.post('/signup', user);\n            if (res.status === 201) {\n                dispatch({ type: authConstants.SIGNUP_SUCCESS });\n                const { token, user } = res.data;\n                localStorage.setItem('token', token);\n                localStorage.setItem('user', JSON.stringify(user));\n                dispatch({\n                    type: authConstants.LOGIN_SUCCESS,\n                    payload: {\n                        token,\n                        user\n                    }\n                });\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport const login = (user) => {\n\n    console.log(user);\n\n    return async (dispatch) => {\n\n        dispatch({ type: authConstants.LOGIN_REQUEST });\n\n        const res = await axios.post(`/signin`, {\n            ...user\n        });\n\n        if (res.status === 200) {\n            const { token, user } = res.data;\n            localStorage.setItem('token', token);\n            localStorage.setItem('user', JSON.stringify(user));\n            dispatch({\n                type: authConstants.LOGIN_SUCCESS,\n                payload: {\n                    token, user\n                }\n            });\n        } else {\n            if (res.status === 400) {\n                dispatch({\n                    type: authConstants.LOGIN_FAILURE,\n                    payload: { error: res.data.error }\n                });\n            }\n        }\n    }\n}\n\n\n\nexport const isUserLoggedIn = () => {\n    return async dispatch => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            const user = JSON.parse(localStorage.getItem('user'));\n            dispatch({\n                type: authConstants.LOGIN_SUCCESS,\n                payload: {\n                    token, user\n                }\n            });\n\n        } else {\n            dispatch({\n                type: authConstants.LOGIN_FAILURE,\n                payload: { error: 'Fail to login' }\n            });\n        }\n    }\n}\n\n\nexport const signout = () => {\n    return async (dispatch) => {\n        dispatch({ type: authConstants.LOGOUT_REQUEST });\n        //localStorage.removeItem('user');\n        //localStorage.removeItem('token');\n        localStorage.clear();\n        dispatch({ type: authConstants.LOGOUT_SUCCESS });\n        dispatch({ type: cartConstants.RESET_CART });\n        //const res = await axios.post(`/admin/signout`);\n        // if(res.status === 200){\n\n        // }else{\n        //     dispatch({\n        //         type: authConstants.LOGOUT_FAILURE,\n        //         payload: { error: res.data.error }\n        //     });\n        // }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}